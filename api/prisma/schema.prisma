// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Image {
  id                  String               @id @default(uuid())
  name                String
  storeType           String               @default("local")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  programmingLanguage ProgrammingLanguage?
}

model Student {
  id              String                 @id @default(uuid())
  email           String                 @unique
  name            String?
  password        String
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  gameAnswers     StudentAnswer[]
  levelProgresses StudentLevelProgress[]
}

model ProgrammingLanguage {
  id          String   @id @default(uuid())
  name        String
  description String
  image       Image    @relation(fields: [imageId], references: [id])
  imageId     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module?
}

model Module {
  id                    String              @id @default(uuid())
  name                  String
  description           String
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  programmingLanguage   ProgrammingLanguage @relation(fields: [programmingLanguageId], references: [id])
  programmingLanguageId String              @unique
  orderNumber           Int                 @default(0)
  levels                Level[]
}

model StudentLevelProgress {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   Student  @relation(fields: [studentId], references: [id])
  level     Level    @relation(fields: [levelId], references: [id])
  studentId String
  levelId   String
}

model Level {
  id                   String                 @id @default(uuid())
  name                 String
  description          String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  orderNumber          Int                    @default(0)
  module               Module                 @relation(fields: [moduleId], references: [id])
  miniGames            MiniGame[]
  moduleId             String
  studentLevelProgress StudentLevelProgress[]
}

model StudentAnswer {
  id                             String                          @id @default(uuid())
  createdAt                      DateTime                        @default(now())
  updatedAt                      DateTime                        @updatedAt
  correct                        Boolean
  studentId                      String
  student                        Student                         @relation(fields: [studentId], references: [id])
  miniGame                       MiniGame                        @relation(fields: [miniGameId], references: [id])
  miniGameId                     String
  trueFalseMiniGameStudentAnswer TrueFalseMiniGameStudentAnswer?
}

model TrueFalseMiniGameStudentAnswer {
  id              String        @id @default(uuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  studentAnswer   StudentAnswer @relation(fields: [studentAnswerId], references: [id])
  studentAnswerId String        @unique
  answer          Boolean
}

model MiniGame {
  id                       String                  @id @default(uuid())
  type                     String
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  level                    Level                   @relation(fields: [levelId], references: [id])
  levelId                  String
  trueFalseMiniGame        TrueFalseMiniGame?      @relation(fields: [trueFalseMiniGameId], references: [id])
  codeCompletionMiniGame   CodeCompletionMiniGame? @relation(fields: [codeCompletionMiniGameId], references: [id])
  codeOrderingMiniGame     CodeOrderingMiniGame?   @relation(fields: [codeOrderingMiniGameId], references: [id])
  trueFalseMiniGameId      String?                 @unique
  codeCompletionMiniGameId String?                 @unique
  codeOrderingMiniGameId   String?                 @unique
  studentAnswers           StudentAnswer[]
  orderNumber              Int                     @default(0)
}

model TrueFalseMiniGame {
  id            String    @id @default(uuid())
  question      String
  correctAnswer Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  miniGame      MiniGame?
}

model CodeCompletionMiniGame {
  id        String                         @id @default(uuid())
  code      String
  options   CodeCompletionMiniGameOption[]
  createdAt DateTime                       @default(now())
  updatedAt DateTime                       @updatedAt
  miniGame  MiniGame?
}

model CodeOrderingMiniGame {
  id        String                       @id @default(uuid())
  options   CodeOrderingMiniGameOption[]
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
  miniGame  MiniGame?
}

model CodeCompletionMiniGameOption {
  id                       String                 @id @default(uuid())
  content                  String
  isCorrect                Boolean
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  codeCompletionMiniGame   CodeCompletionMiniGame @relation(fields: [codeCompletionMiniGameId], references: [id])
  codeCompletionMiniGameId String
}

model CodeOrderingMiniGameOption {
  id                     String               @id @default(uuid())
  content                String
  order                  Int
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  codeOrderingMiniGame   CodeOrderingMiniGame @relation(fields: [codeOrderingMiniGameId], references: [id])
  codeOrderingMiniGameId String
}
